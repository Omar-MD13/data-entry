{"version":3,"sources":["comps/Firebase.js","comps/ItemEntry.jsx","comps/ItemCheck.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","ItemEntry","useState","itemID","setItemID","color","setColor","name","setName","weight","setWeight","price","setPrice","allItemID","setAllItemID","show","setShow","successMsgShow","setSuccessMsgShow","itemIDRef","useRef","useEffect","collection","onSnapshot","snap","docs","map","doc","id","className","onClick","src","process","alt","autoFocus","ref","type","placeholder","value","onChange","e","target","preventDefault","length","matchingItemID","forEach","alert","current","style","border","set","setTimeout","ItemCheck","quantity","setQuantity","tableItems","setTableItems","refresh","setRefresh","qtyInputRef","itemIDInputRef","action","Number","focus","hidden","matchingID","indexOfMatchingObject","filter","obj","findIndex","qty","get","then","exists","modifiedObj","data","itemObj","index","App","showEntry","setShowEntry","showCheck","setShowCheck","handleBtn","btn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c51b7e23.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n   apiKey: \"AIzaSyBVGzQbrpxOP0b5NykxOz2FLO9jKI33IhE\",\r\n   authDomain: \"supermarket-99c4f.firebaseapp.com\",\r\n   projectId: \"supermarket-99c4f\",\r\n   storageBucket: \"supermarket-99c4f.appspot.com\",\r\n   messagingSenderId: \"1069456334725\",\r\n   appId: \"1:1069456334725:web:38dc1bb268de3b1d3feeec\",\r\n   measurementId: \"G-EN2CHS2W9Z\",\r\n};\r\n\r\nconst firebaseConn = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseConn.firestore();\r\n\r\nexport default db;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport db from \"./Firebase\";\r\n\r\nconst ItemEntry = () => {\r\n   const [itemID, setItemID] = useState(\"\");\r\n   const [color, setColor] = useState(\"none\");\r\n   const [name, setName] = useState(\"\");\r\n   const [weight, setWeight] = useState(\"\");\r\n   const [price, setPrice] = useState(\"\");\r\n\r\n   const [allItemID, setAllItemID] = useState([]);\r\n   const [show, setShow] = useState(false);\r\n   const [successMsgShow, setSuccessMsgShow] = useState(false);\r\n\r\n   const itemIDRef = useRef(null);\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n\r\n      if (itemID.length > 0) {\r\n         let matchingItemID = 0;\r\n\r\n         allItemID.forEach((id) => {\r\n            if (id === itemID) {\r\n               matchingItemID += 1;\r\n            }\r\n         });\r\n\r\n         if (matchingItemID > 0) {\r\n            alert(\"ItemID already in use, please enter an unique itemID\");\r\n            itemIDRef.current.style.border = \"1px solid red\";\r\n         } else {\r\n            db.collection(\"ItemLists\")\r\n               .doc(itemID)\r\n               .set({\r\n                  itemID: itemID,\r\n                  color: color,\r\n                  name: name.length > 0 ? name : \"\",\r\n                  weight: weight.length > 0 ? weight : \"\",\r\n                  price: price.length > 0 ? price : \"\",\r\n               });\r\n\r\n            itemIDRef.current.style.border = \"1px solid #7d7d7d\";\r\n            setItemID(\"\");\r\n            setColor(\"none\");\r\n            setWeight(\"\");\r\n            setPrice(\"\");\r\n\r\n            setSuccessMsgShow(true);\r\n            setTimeout(() => {\r\n               setSuccessMsgShow(false);\r\n               setName(\"\");\r\n            }, 1500);\r\n         }\r\n      } else {\r\n         alert(\"Required ItemID\");\r\n         itemIDRef.current.style.border = \"1px solid red\";\r\n      }\r\n   };\r\n\r\n   useEffect(() => {\r\n      db.collection(\"ItemLists\").onSnapshot((snap) =>\r\n         setAllItemID(\r\n            snap.docs.map((doc) => {\r\n               return doc.id;\r\n            })\r\n         )\r\n      );\r\n   }, []);\r\n\r\n   return (\r\n      <div className=\"dataEntry container\">\r\n         <div\r\n            className={successMsgShow ? \"successMsg show\" : \"successMsg hide\"}\r\n         >\r\n            <span>&#10003; {name} added to database.</span>\r\n         </div>\r\n\r\n         <div className=\"title\">\r\n            <span>Item Entry</span>\r\n            <button onClick={() => setShow(true)}>How to use?</button>\r\n         </div>\r\n         <div className=\"wrapper\">\r\n            <div className={show ? \"howtouse show\" : \"howtouse hide\"}>\r\n               <div className=\"header\">\r\n                  <span className=\"closeBtn\" onClick={() => setShow(false)}>\r\n                     X\r\n                  </span>\r\n               </div>\r\n               <div>\r\n                  Enter ItemID or scan a product barcode using - Barcode\r\n                  scanner.\r\n                  <div>\r\n                     <img\r\n                        src={process.env.PUBLIC_URL + \"/barcodeScan.jpg\"}\r\n                        alt=\"barcode scanning\"\r\n                     />\r\n                  </div>\r\n                  Then fillup the other input fields and after submitting goto\r\n                  'Item Check'.\r\n               </div>\r\n            </div>\r\n\r\n            <ul>\r\n               <li className=\"itemID\">\r\n                  <div>\r\n                     <input\r\n                        autoFocus\r\n                        ref={itemIDRef}\r\n                        type=\"number\"\r\n                        placeholder=\"Item ID\"\r\n                        value={itemID}\r\n                        onChange={(e) => setItemID(e.target.value)}\r\n                     />\r\n                  </div>\r\n               </li>\r\n               <li>\r\n                  <div>\r\n                     <select\r\n                        name=\"color\"\r\n                        id=\"color\"\r\n                        value={color}\r\n                        onChange={(e) => setColor(e.target.value)}\r\n                     >\r\n                        <option value=\"none\">Select color</option>\r\n                        <option value=\"black\">Black</option>\r\n                        <option value=\"red\">Red</option>\r\n                        <option value=\"yellow\">Yellow</option>\r\n                        <option value=\"blue\">Blue</option>\r\n                        <option value=\"green\">Green</option>\r\n                     </select>\r\n                  </div>\r\n               </li>\r\n               <li>\r\n                  <div>\r\n                     <input\r\n                        type=\"text\"\r\n                        placeholder=\"Name\"\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                     />\r\n                  </div>\r\n               </li>\r\n               <li>\r\n                  <div>\r\n                     <input\r\n                        type=\"text\"\r\n                        placeholder=\"Weight\"\r\n                        value={weight}\r\n                        onChange={(e) => setWeight(e.target.value)}\r\n                     />\r\n                  </div>\r\n               </li>\r\n               <li>\r\n                  <div>\r\n                     <input\r\n                        type=\"number\"\r\n                        placeholder=\"Price\"\r\n                        value={price}\r\n                        onChange={(e) => setPrice(e.target.value)}\r\n                     />\r\n                     <strong>AED</strong>\r\n                  </div>\r\n               </li>\r\n            </ul>\r\n         </div>\r\n         <div className=\"submitBtn\">\r\n            <button onClick={handleSubmit}>Submit</button>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default ItemEntry;\r\n","import React, { useState, useRef } from \"react\";\r\nimport db from \"./Firebase\";\r\n\r\nconst ItemCheck = () => {\r\n   const [itemID, setItemID] = useState(\"\");\r\n   const [quantity, setQuantity] = useState(1);\r\n   const [tableItems, setTableItems] = useState([]);\r\n   const [refresh, setRefresh] = useState(false);\r\n   const [show, setShow] = useState(false);\r\n\r\n   const qtyInputRef = useRef(null);\r\n   const itemIDInputRef = useRef(null);\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n\r\n      if (itemID.length > 0) {\r\n         let matchingID = 0;\r\n         let indexOfMatchingObject = null;\r\n\r\n         tableItems.filter((obj) => {\r\n            if (obj.itemID === itemID) {\r\n               matchingID += 1;\r\n\r\n               indexOfMatchingObject = tableItems.findIndex(\r\n                  (obj) => obj.itemID === itemID\r\n               );\r\n            }\r\n         });\r\n\r\n         if (matchingID > 0) {\r\n            let obj = tableItems[indexOfMatchingObject];\r\n            obj.qty += quantity;\r\n            setItemID(\"\");\r\n\r\n            refresh ? setRefresh(false) : setRefresh(true);\r\n         } else {\r\n            db.collection(\"ItemLists\")\r\n               .doc(itemID)\r\n               .get()\r\n               .then((obj) => {\r\n                  if (obj.exists) {\r\n                     let modifiedObj = obj.data();\r\n                     modifiedObj.qty =\r\n                        quantity === \"\" ? 1 : quantity == \"0\" ? 1 : quantity;\r\n                     setTableItems([...tableItems, modifiedObj]);\r\n                  } else {\r\n                     alert(\"Item not found\");\r\n                  }\r\n               });\r\n\r\n            itemIDInputRef.current.focus();\r\n            setItemID(\"\");\r\n            setQuantity(1);\r\n         }\r\n      } else {\r\n         alert(\"Enter itemID or scan barcode\");\r\n      }\r\n   };\r\n\r\n   return (\r\n      <div className=\"dataCheck container\">\r\n         <div className=\"title\">\r\n            <span>Item Check</span>\r\n            <button onClick={() => setShow(true)}>How to use?</button>\r\n         </div>\r\n         <form className=\"inputField\" action=\"\">\r\n            <div className={show ? \"howtouse show\" : \"howtouse hide\"}>\r\n               <div className=\"header\">\r\n                  <span className=\"closeBtn\" onClick={() => setShow(false)}>\r\n                     X\r\n                  </span>\r\n               </div>\r\n               <div>\r\n                  Enter the ItemID of the product you just did entry or scan the\r\n                  product barcode using - Barcode scanner.\r\n                  <div>\r\n                     <img\r\n                        src={process.env.PUBLIC_URL + \"/barcodeScan.jpg\"}\r\n                        alt=\"barcode scanning\"\r\n                     />\r\n                  </div>\r\n                  <strong>Note: </strong>If you enter same ItemID multiple times\r\n                  it'll increase the qty(quantity) of product also price will be\r\n                  increase.\r\n               </div>\r\n            </div>\r\n\r\n            <input\r\n               ref={itemIDInputRef}\r\n               className=\"itemID\"\r\n               autoFocus\r\n               type=\"number\"\r\n               placeholder=\"Item ID\"\r\n               value={itemID}\r\n               onChange={(e) => setItemID(e.target.value)}\r\n            />\r\n            <div className=\"quantity\">\r\n               <span>Qty: </span>\r\n               <input\r\n                  ref={qtyInputRef}\r\n                  type=\"number\"\r\n                  value={quantity}\r\n                  onChange={(e) => setQuantity(e.target.value)}\r\n               />\r\n               <div className=\"upDownArrow\">\r\n                  <div\r\n                     onClick={() => {\r\n                        setQuantity(Number(quantity) + 1);\r\n                        qtyInputRef.current.focus();\r\n                     }}\r\n                  >\r\n                     <span>^</span>\r\n                  </div>\r\n                  <div\r\n                     onClick={() => {\r\n                        qtyInputRef.current.focus();\r\n                        return quantity > 1\r\n                           ? setQuantity(Number(quantity) - 1)\r\n                           : null;\r\n                     }}\r\n                  >\r\n                     <span>v</span>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n            <button type=\"submit\" hidden onClick={handleSubmit}></button>\r\n         </form>\r\n         <div className=\"itemList\">\r\n            <table>\r\n               <thead>\r\n                  {tableItems.length > 0 ? (\r\n                     <tr>\r\n                        <th>Items</th>\r\n                        <th>Name</th>\r\n                        <th>Color</th>\r\n                        <th>Weight</th>\r\n                        <th>Qty</th>\r\n                        <th>Price</th>\r\n                     </tr>\r\n                  ) : null}\r\n               </thead>\r\n               <tbody>\r\n                  {refresh\r\n                     ? tableItems.map((itemObj, index) => {\r\n                          return (\r\n                             <tr key={itemObj.itemID}>\r\n                                <td>{index + 1}</td>\r\n                                <td>{itemObj.name}</td>\r\n                                <td>{itemObj.color}</td>\r\n                                <td>{itemObj.weight}</td>\r\n                                <td>{itemObj.qty}</td>\r\n                                <td>\r\n                                   {itemObj.price * itemObj.qty}{\" \"}\r\n                                   <span>AED</span>\r\n                                </td>\r\n                             </tr>\r\n                          );\r\n                       })\r\n                     : tableItems.map((itemObj, index) => {\r\n                          return (\r\n                             <tr key={itemObj.itemID}>\r\n                                <td>{index + 1}</td>\r\n                                <td>{itemObj.name}</td>\r\n                                <td>{itemObj.color}</td>\r\n                                <td>{itemObj.weight}</td>\r\n                                <td>{itemObj.qty}</td>\r\n                                <td>\r\n                                   {itemObj.price * itemObj.qty}{\" \"}\r\n                                   <span>AED</span>\r\n                                </td>\r\n                             </tr>\r\n                          );\r\n                       })}\r\n               </tbody>\r\n            </table>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default ItemCheck;\r\n","import React, { useState } from \"react\";\n\nimport \"./sass/main.css\";\nimport ItemEntry from \"./comps/ItemEntry\";\nimport ItemCheck from \"./comps/ItemCheck\";\n\nconst App = () => {\n   const [showEntry, setShowEntry] = useState(false);\n   const [showCheck, setShowCheck] = useState(false);\n\n   const handleBtn = (btn) => {\n      if (btn === \"entry\") {\n         setShowEntry(true);\n         return showCheck ? setShowCheck(false) : null;\n      } else {\n         setShowCheck(true);\n         return showEntry ? setShowEntry(false) : null;\n      }\n   };\n\n   return (\n      <div className=\"app\">\n         <h3 className=\"title container-fluid\">\n            <span>Data entry & check</span>\n            <small>(Demo)</small>\n         </h3>\n         <div className=\"buttons container\">\n            <button\n               className={showEntry ? \"active\" : null}\n               onClick={() => handleBtn(\"entry\")}\n            >\n               Item Entry\n            </button>\n            <button\n               className={showCheck ? \"active\" : null}\n               onClick={() => handleBtn(\"check\")}\n            >\n               Item Check\n            </button>\n         </div>\n         {showEntry && <ItemEntry />}\n         {showCheck && <ItemCheck />}\n      </div>\n   );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}